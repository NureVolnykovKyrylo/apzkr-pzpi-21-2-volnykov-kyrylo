// <auto-generated />
using System;
using AquaTrack.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AquaTrack.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240516154832_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AquaTrack.Models.AnalysisReport", b =>
                {
                    b.Property<int>("AnalysisReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AnalysisReportId"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdentifiedTrends")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Recommendations")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ResearchReportId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AnalysisReportId");

                    b.HasIndex("ResearchReportId")
                        .IsUnique();

                    b.ToTable("AnalysisReports");
                });

            modelBuilder.Entity("AquaTrack.Models.Aquarium", b =>
                {
                    b.Property<int>("AquariumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AquariumId"));

                    b.Property<float?>("Acidity")
                        .HasColumnType("real");

                    b.Property<string>("AquariumType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float?>("Lighting")
                        .HasColumnType("real");

                    b.Property<float?>("Temperature")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<float?>("WaterLevel")
                        .HasColumnType("real");

                    b.HasKey("AquariumId");

                    b.HasIndex("UserId");

                    b.ToTable("Aquariums");
                });

            modelBuilder.Entity("AquaTrack.Models.FeedingSchedule", b =>
                {
                    b.Property<int>("FeedingScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FeedingScheduleId"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("AquariumId")
                        .HasColumnType("integer");

                    b.Property<float?>("FeedAmount")
                        .HasColumnType("real");

                    b.Property<float>("FeedTime")
                        .HasColumnType("real");

                    b.Property<string>("FeedType")
                        .HasColumnType("text");

                    b.Property<float?>("RepeatInterval")
                        .HasColumnType("real");

                    b.HasKey("FeedingScheduleId");

                    b.HasIndex("AquariumId");

                    b.ToTable("FeedingSchedules");
                });

            modelBuilder.Entity("AquaTrack.Models.Inhabitant", b =>
                {
                    b.Property<int>("InhabitantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InhabitantId"));

                    b.Property<int>("AquariumId")
                        .HasColumnType("integer");

                    b.Property<string>("Behavior")
                        .HasColumnType("text");

                    b.Property<string>("Condition")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserNotes")
                        .HasColumnType("text");

                    b.HasKey("InhabitantId");

                    b.HasIndex("AquariumId");

                    b.ToTable("Inhabitants");
                });

            modelBuilder.Entity("AquaTrack.Models.ResearchReport", b =>
                {
                    b.Property<int>("ResearchReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ResearchReportId"));

                    b.Property<int>("AnalysisReportId")
                        .HasColumnType("integer");

                    b.Property<int>("AquariumId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ResearchReportId");

                    b.HasIndex("AquariumId");

                    b.ToTable("ResearchReports");
                });

            modelBuilder.Entity("AquaTrack.Models.SensorData", b =>
                {
                    b.Property<int>("SensorDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SensorDataId"));

                    b.Property<string>("SensorIdentificator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SensorStatus")
                        .HasColumnType("text");

                    b.Property<int>("SensorType")
                        .HasColumnType("integer");

                    b.Property<double>("SensorValue")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SensorDataId");

                    b.ToTable("SensorData");
                });

            modelBuilder.Entity("AquaTrack.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ResearchReportSensorData", b =>
                {
                    b.Property<int>("ResearchReportsResearchReportId")
                        .HasColumnType("integer");

                    b.Property<int>("SensorDataId")
                        .HasColumnType("integer");

                    b.HasKey("ResearchReportsResearchReportId", "SensorDataId");

                    b.HasIndex("SensorDataId");

                    b.ToTable("ResearchReportSensorData");
                });

            modelBuilder.Entity("AquaTrack.Models.AnalysisReport", b =>
                {
                    b.HasOne("AquaTrack.Models.ResearchReport", "ResearchReport")
                        .WithOne("AnalysisReport")
                        .HasForeignKey("AquaTrack.Models.AnalysisReport", "ResearchReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchReport");
                });

            modelBuilder.Entity("AquaTrack.Models.Aquarium", b =>
                {
                    b.HasOne("AquaTrack.Models.User", "User")
                        .WithMany("Aquariums")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AquaTrack.Models.FeedingSchedule", b =>
                {
                    b.HasOne("AquaTrack.Models.Aquarium", "Aquarium")
                        .WithMany("FeedingSchedules")
                        .HasForeignKey("AquariumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aquarium");
                });

            modelBuilder.Entity("AquaTrack.Models.Inhabitant", b =>
                {
                    b.HasOne("AquaTrack.Models.Aquarium", "Aquarium")
                        .WithMany("Inhabitants")
                        .HasForeignKey("AquariumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aquarium");
                });

            modelBuilder.Entity("AquaTrack.Models.ResearchReport", b =>
                {
                    b.HasOne("AquaTrack.Models.Aquarium", "Aquarium")
                        .WithMany()
                        .HasForeignKey("AquariumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aquarium");
                });

            modelBuilder.Entity("ResearchReportSensorData", b =>
                {
                    b.HasOne("AquaTrack.Models.ResearchReport", null)
                        .WithMany()
                        .HasForeignKey("ResearchReportsResearchReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AquaTrack.Models.SensorData", null)
                        .WithMany()
                        .HasForeignKey("SensorDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AquaTrack.Models.Aquarium", b =>
                {
                    b.Navigation("FeedingSchedules");

                    b.Navigation("Inhabitants");
                });

            modelBuilder.Entity("AquaTrack.Models.ResearchReport", b =>
                {
                    b.Navigation("AnalysisReport")
                        .IsRequired();
                });

            modelBuilder.Entity("AquaTrack.Models.User", b =>
                {
                    b.Navigation("Aquariums");
                });
#pragma warning restore 612, 618
        }
    }
}
